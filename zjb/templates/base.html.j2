<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Zuul Jobs Board</title>
        <link rel="stylesheet" href="{{ url_for('static', filename='layout.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='header.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='nav.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='footer.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='views.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='results.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='overlay.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='details.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='toast.css') }}">
        <script>
{% if groups %}
            const groups = {{ groups }};
{% else %}
            const groups = {};
{% endif %}

            let selected = 'ANY';
            let searched = '';

            function filterRows() {
                let rows = document.querySelectorAll('table tbody tr');
                for(const row of rows) {
                    let project = row.firstElementChild.textContent;
                    let text = row.textContent.replace(/\s\s+/g, ' ').toLowerCase();

                    if(
                       (selected == 'ANY' || groups[selected].includes(project))
                       &&
                       (searched == '' || text.match(searched))
                    ) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                }
            }

            function updateURL() {
                if(window.history.replaceState) {
                    let url = window.location.origin + window.location.pathname;
                    if(search.value) {
                        url += '?q=' + search.value;
                    }

                    window.history.replaceState({}, '', url);
                }
            }

            function toast(text, status='ok') {
                let box = document.createElement('div');
                box.classList.add('toast');

                document.body.appendChild(box);

                box.innerHTML = text;
                box.classList.add(status);
                box.classList.add('visible');

                setTimeout(function() {
                    box.classList.remove('visible');
                    document.body.removeChild(box);
                }, 3000);
            }

            document.addEventListener('keydown', function(event) {
                const isNotCombinedKey = !(event.ctrlKey || event.altKey || event.shiftKey);
                if (event.key === 'Escape' && isNotCombinedKey) {
                    let overlays = document.querySelectorAll('div.overlay.visible');
                    for(const overlay of overlays) {
                        overlay.classList.remove('visible');
                        overlay.firstElementChild.firstElementChild.reset();
                    }
                }
            });

            document.addEventListener('DOMContentLoaded', function(event) {
                let select = document.getElementById('group');
                let search = document.getElementById('search');

                if(select) {
                    for(const group in groups) {
                        const option = document.createElement('option');
                        const text = document.createTextNode(group);
                        option.appendChild(text);
                        select.appendChild(option);
                    }

                    select.addEventListener('change', function(event) {
                        selected = event.target.value;
                        filterRows();
                    });
                }

                if(search) {
                    search.addEventListener('input', function(event) {
                        searched = event.target.value.toLowerCase();
                        filterRows();
                        updateURL();
                    });

                    let failed = document.getElementById('failed');
                    failed.addEventListener('click', function(event) {
                        search.value = '(FAILURE|RETRY|ABORT)';
                        searched = search.value.toLowerCase();
                        filterRows();
                        updateURL();
                    });

                    let tested = document.getElementById('tested');
                    tested.addEventListener('click', function(event) {
                        search.value = '(SUCCESS|FAILURE|RETRY|ABORT)';
                        searched = search.value.toLowerCase();
                        filterRows();
                        updateURL();
                    });

                    let untested = document.getElementById('untested');
                    untested.addEventListener('click', function(event) {
                        search.value = '^((?!(SUCCESS|FAILURE|RETRY|ABORT)).)*$';
                        searched = search.value.toLowerCase();
                        filterRows();
                        updateURL();
                    });

                    {% if query -%}
                    search.value = {{ query | tojson }};
                    if(search.value) {
                        searched = search.value.toLowerCase();
                        filterRows();
                        updateURL();
                    }
                    {%- endif %}
                }

                let tables = document.querySelectorAll('table.view');
                for(const table of tables) {
                    table.width = table.offsetWidth;
                }

                let captions = document.querySelectorAll('table.view caption');
                for(const caption of captions) {
                    caption.addEventListener('click', function(event) {
                        for(const element of caption.parentElement.querySelectorAll('tbody, thead, tfoot')) {
                            element.hidden = ! element.hidden;
                        }
                    });
                }

                let links = document.querySelectorAll('main table td a.status');
                for(const link of links) {
                    link.addEventListener('click', function(event) {
                        let overlay = event.currentTarget.nextElementSibling;
                        overlay.classList.add('visible');

                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    });
                }

                let forms = document.querySelectorAll('main table form');
                for(const form of forms) {
                    form.addEventListener('submit', function(event) {
                        const formdata = new FormData(event.target);
                        const text = formdata.get('notes');
                        const url = event.target.action;

                        fetch(url, {
                            method: 'POST',
                            body: new URLSearchParams(formdata)
                        })
                        .then(function (response) {
                            if(response.ok) {
                                toast('Saved successfully');

                                let overlay = event.target.parentElement.parentElement;
                                overlay.classList.remove('visible');

                                let textarea = event.target.querySelector('textarea');
                                textarea.innerHTML = text;

                                let status = overlay.previousElementSibling;
                                let icon = status.querySelector('span.notes');

                                if(text && !icon) {
                                    let icon = document.createElement('span');
                                    icon.className = 'notes';
                                    status.appendChild(icon);
                                } else if(!text && icon) {
                                    status.removeChild(icon);
                                }
                            } else {
                                console.error('Response not ok', response);
                                toast('Error ' + response.status, 'err');
                            }
                        })
                        .catch (function (error) {
                            console.error('Request failed:', error);
                            toast('Request failed: (see console)', 'err');
                        });

                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    });
                    form.addEventListener('reset', function(event) {
                        let overlay = event.target.parentElement.parentElement;
                        overlay.classList.remove('visible');
                    });
                }
            });
        </script>
    </head>
    <body>
        <header>
            <a href="{{ url_prefix }}">
                <h1>Zuul Jobs Board</h1>
                <h2>– neatly presented statuses</h2>
            </a>
        </header>
        {% block navigation %}
        {% endblock %}
        <main>
            {% block content %}
            {% endblock %}
        </main>
        <footer>
            <p>
                Last update: {{ last_update }}
            </p>
            <p>
                &copy; 2022–2023
                –
                <a href="https://github.com/sdatko/zuul-jobs-board">Zuul Jobs Board</a>
                by
                <a href="https://datko.pl/">Szymon Datko</a>
            </p>
        </footer>
    </body>
</html>
